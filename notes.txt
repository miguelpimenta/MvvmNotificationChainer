EXAMPLE VIEWMODEL
-----------------

OrderViewModel
  LineItem1
    Quantity
    Price
    Cost <- 
      this.Quantity
      this.Price

  LineItem2
    Quantity
    Price
    Cost <- 
      this.Quantity
      this.Price

  LineItem3
    Quantity
    Price
    Cost <- 
      this.Quantity
      this.Price

  TotalCost <- 
    this.LineItem1
      this.LineItem1.Cost
    this.LineItem2
      this.LineItem2.Cost
    this.LineItem3
      this.LineItem3.Quantity
      this.LineItem3.Price

  NumLineItems <- 
    this.LineItem1
    this.LineItem2
    this.LineItem3

NOTES
----------------------------

* TotalCost chain
  * observer for LineItem1
    * observer for Cost
  * observer for LineItem2
    * observer for Cost
  * observer for LineItem3
    * observer for Quantity + Price

ChainManagers all the way down?

OrderViewModel creates chain manager for self
OrderViewModel chain manager creates chain for OrderViewModel.TotalCost
...
TotalCost chain linked to OrderViewModel.LineItem3
TotalCost chain creates chain manager for LineItem3
LineItem3 chain manager creates chain for TotalCost
LineItem3-TotalCost chain linked to LineItem3.Quantity
LineItem3-TotalCost chain linked to LineItem3.Price
...

OrderHistoryViewModel.Order1.LineItem1.Quantity * OrderHistoryViewModel.Order1.LineItem1.Price -> OrderHistoryViewModel.TotalSpent

OrderHistoryViewModel.myNotificationChainManager observes OrderHistoryViewModel
	-and notifies on Order1 for OrderHistoryViewModel.TotalSpent
	-also when Order1 notifies 
		-and goes from null to non-null
			-NotificationChainManager created (on/where ???) and observes Order1
			-and notifies on LineItem1 for OrderHistoryViewModel.TotalSpent
			-also when LineItem1 notifies
				-and goes from null to non-null
					-NotificationChainManager created (on/where ???) and observes LineItem1
					-and notifies on Quantity for OrderHistoryViewModel.TotalSpent
					-and notifies on Price for OrderHistoryViewModel.TotalSpent
				-and goes from non-null to null
					-NotificationChainManager observing LineItem1 is disposed
			-and notifies on LineItem2 for OrderHistoryViewModel.TotalSpent
			-also when LineItem2 notifies
				-and goes from null to non-null
					-NotificationChainManager created (on/where ???) and observes LineItem2
					-and notifies on Quantity for OrderHistoryViewModel.TotalSpent
					-and notifies on Price for OrderHistoryViewModel.TotalSpent
				-and goes from non-null to null
					-NotificationChainManager observing LineItem2 is disposed
		-and goes from non-null to null
			-NotificationChainManager observing LineItem1 is disposed (if exists)
			-NotificationChainManager observing LineItem2 is disposed (if exists)
			-NotificationChainManager observing Order1 is disposed
	-and notifies on Order2 for OrderHistoryViewModel.TotalSpent
	-also when Order2 notifies 
		-and goes from null to non-null
			-NotificationChainManager created (on/where ???) and observes Order2
			-and notifies on LineItem1 for OrderHistoryViewModel.TotalSpent
			-also when LineItem1 notifies
				-and goes from null to non-null
					-NotificationChainManager created (on/where ???) and observes LineItem1
					-and notifies on Quantity for OrderHistoryViewModel.TotalSpent
					-and notifies on Price for OrderHistoryViewModel.TotalSpent
				-and goes from non-null to null
					-NotificationChainManager observing LineItem1 is disposed
			-and notifies on LineItem2 for OrderHistoryViewModel.TotalSpent
			-also when LineItem2 notifies
				-and goes from null to non-null
					-NotificationChainManager created (on/where ???) and observes LineItem2
					-and notifies on Quantity for OrderHistoryViewModel.TotalSpent
					-and notifies on Price for OrderHistoryViewModel.TotalSpent
				-and goes from non-null to null
					-NotificationChainManager observing LineItem2 is disposed
		-and goes from non-null to null
			-NotificationChainManager observing LineItem1 is disposed (if exists)
			-NotificationChainManager observing LineItem2 is disposed (if exists)
			-NotificationChainManager observing Order2 is disposed
...

another attempt at an algorithm:

On<T1,T2,T3,T4> (Expression<Func<T1>> prop1Getter, Expression<Func<T1,T2>> prop2Getter, Expression<Func<T2,T3>> prop3Getter, Expression<Func<T3,T4>> prop4Getter)
where T1-T4 are all INotifyPropertyChanged

observe T0 for T1 - notifyingObject, prop1Getter, raiseDelegate
observe T1 for T2 - prop2Getter, raiseDelegate, observeDelegate
observe T2 for T3 - prop3Getter, raiseDelegate, observeDelegate
observe T3 for T4 - prop4Getter, raiseDelegate

thinking... what if multiple props are being watched at T1? probably can't use a manager because each will behave differently the next level down

...


USAGE
----------------------------

ParentObject 1..1 ChainManager 
ChainManager 1..M Chains
Dependent Property 1..1 Chain
Chain 1..M Notifying Properties
Chain 1..M Observers
NotifyingPropertiesObserver 1..1 NotifyingObject
NotifyingPropertiesObserver 1..M NotifyingProperties

ChainManagers manage multiple Dependent Properties for a common parent object
	ChainManagers create single NotificationChain for each Dependent Property

NotificationChain observes multiple Notifying Properties on multiple objects and calls event handlers when any of those Notifying Properties notify
  The standard case is that a Notifying Property belongs to the same parent object as the Dependent Property (NotifyingPropertiesObserver)
  The rarer case is that a Notifying Property is on another Notifying Property

NotifyingPropertiesObserver observes multiple Notifying Properties on a single object
	